name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每日安全扫描
    - cron: '0 6 * * *'

env:
  NODE_VERSION: '24'
  SOLIDITY_VERSION: '0.8.22'
  FOUNDRY_PROFILE: ci

jobs:
  test:
    name: Test Smart Contracts
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: contracts/package-lock.json

    - name: Install dependencies
      run: |
        cd contracts
        npm ci

    - name: Compile contracts
      run: |
        cd contracts
        npx hardhat compile

    - name: Run tests
      run: |
        cd contracts
        npx hardhat test

    - name: Generate coverage report
      run: |
        cd contracts
        npx hardhat coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./contracts/coverage/lcov.info
        directory: ./contracts/coverage
        fail_ci_if_error: true
        verbose: true

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: contracts/package-lock.json

    - name: Install dependencies
      run: |
        cd contracts
        npm ci

    - name: Run Solidity linter
      run: |
        cd contracts
        npx solhint 'src/**/*.sol'

    - name: Run JavaScript linter
      run: |
        cd contracts
        npx eslint 'test/**/*.js' 'scripts/**/*.js' --format=compact

  security:
    name: Security Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: contracts/package-lock.json

    - name: Install dependencies
      run: |
        cd contracts
        npm ci

    - name: Run Slither security analysis
      uses: crytic/slither-action@v0.4.1
      with:
        node-version: ${{ env.NODE_VERSION }}
        working-directory: contracts
        target: 'src/'
        slither-args: '--exclude-dependencies'
        fail-on: none

    - name: Run custom security checks
      run: |
        cd contracts
        npm run security-check || true

  gas-report:
    name: Gas Usage Report
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: contracts/package-lock.json

    - name: Install dependencies
      run: |
        cd contracts
        npm ci

    - name: Generate gas report
      run: |
        cd contracts
        REPORT_GAS=true npx hardhat test > gas-report.txt

    - name: Comment gas report on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const gasReport = fs.readFileSync('contracts/gas-report.txt', 'utf8');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ⛽ Gas Usage Report\n\n\`\`\`\n${gasReport}\n\`\`\``
          });

  build-artifacts:
    name: Build and Archive Artifacts
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: contracts/package-lock.json

    - name: Install dependencies
      run: |
        cd contracts
        npm ci

    - name: Compile contracts
      run: |
        cd contracts
        npx hardhat compile

    - name: Generate contract documentation
      run: |
        cd contracts
        npx hardhat docgen || true

    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: contract-artifacts
        path: |
          contracts/artifacts/
          contracts/typechain-types/
          contracts/docs/
        retention-days: 30

  deployment-prep:
    name: Deployment Preparation
    runs-on: ubuntu-latest
    needs: [test, lint, security, gas-report]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: contracts/package-lock.json

    - name: Install dependencies
      run: |
        cd contracts
        npm ci

    - name: Compile contracts for deployment
      run: |
        cd contracts
        npx hardhat compile --force

    - name: Verify deployment scripts
      run: |
        cd contracts
        npx hardhat check || true

    - name: Generate deployment plan
      run: |
        cd contracts
        echo "## Deployment Plan" > deployment-plan.md
        echo "- Network: TBD" >> deployment-plan.md
        echo "- Contracts: USDXToken, USDXGovernance" >> deployment-plan.md
        echo "- Gas Estimation: See gas-report" >> deployment-plan.md

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-ready
        path: |
          contracts/artifacts/
          contracts/scripts/
          contracts/deployment-plan.md

  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[benchmark]')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: contracts/package-lock.json

    - name: Install dependencies
      run: |
        cd contracts
        npm ci

    - name: Run performance benchmarks
      run: |
        cd contracts
        BENCHMARK=true npx hardhat test --grep "benchmark" || true

    - name: Generate performance report
      run: |
        cd contracts
        echo "Performance benchmark completed" > benchmark-report.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: performance-benchmark
        path: contracts/benchmark-report.txt

  code-quality-metrics:
    name: Code Quality Metrics
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: contracts/package-lock.json

    - name: Install dependencies
      run: |
        cd contracts
        npm ci

    - name: Generate code metrics
      run: |
        cd contracts
        npx hardhat size-contracts || true
        find src -name "*.sol" | xargs wc -l > lines-of-code.txt

    - name: Analyze code complexity
      run: |
        cd contracts
        echo "Code complexity analysis would run here" > complexity-report.txt

    - name: Upload quality metrics
      uses: actions/upload-artifact@v4
      with:
        name: quality-metrics
        path: |
          contracts/lines-of-code.txt
          contracts/complexity-report.txt

  summary-report:
    name: Summary Report
    runs-on: ubuntu-latest
    needs: [test, lint, security, gas-report, build-artifacts]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate summary report
      run: |
        echo "# 🚀 USDX CI/CD Summary Report" > summary.md
        echo "" >> summary.md
        echo "## 📊 Build Results" >> summary.md
        echo "- Tests: ${{ needs.test.result }}" >> summary.md
        echo "- Linting: ${{ needs.lint.result }}" >> summary.md
        echo "- Security: ${{ needs.security.result }}" >> summary.md
        echo "- Gas Report: ${{ needs.gas-report.result }}" >> summary.md
        echo "- Artifacts: ${{ needs.build-artifacts.result }}" >> summary.md
        echo "" >> summary.md
        echo "## 🔗 Links" >> summary.md
        echo "- [Repository](https://github.com/vipwzw/usdx)" >> summary.md
        echo "- [Documentation](https://docs.usdx.finance)" >> summary.md

    - name: Upload summary report
      uses: actions/upload-artifact@v4
      with:
        name: ci-summary
        path: summary.md
