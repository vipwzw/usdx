name: Contract Monitoring

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      network:
        description: 'Network to monitor'
        required: true
        default: 'ethereum'
        type: choice
        options:
        - ethereum
        - polygon
        - bsc
        - sepolia
        - goerli
        - polygon-mumbai
        - bsc-testnet

env:
  NODE_VERSION: '18'

jobs:
  health-check:
    name: Contract Health Check
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        network: [ethereum, polygon, bsc]
      fail-fast: false
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: contracts/package-lock.json
        
    - name: Install dependencies
      run: |
        cd contracts
        npm ci
        
    - name: Create environment file
      run: |
        cd contracts
        cat > .env << EOF
        INFURA_API_KEY=${{ secrets.INFURA_API_KEY }}
        ALCHEMY_API_KEY=${{ secrets.ALCHEMY_API_KEY }}
        ETHERSCAN_API_KEY=${{ secrets.ETHERSCAN_API_KEY }}
        POLYGONSCAN_API_KEY=${{ secrets.POLYGONSCAN_API_KEY }}
        BSCSCAN_API_KEY=${{ secrets.BSCSCAN_API_KEY }}
        EOF
        
    - name: Check contract status
      id: health-check
      run: |
        cd contracts
        
        # Run monitoring script
        OUTPUT=$(npx hardhat run scripts/monitor.js --network ${{ matrix.network }} 2>&1)
        echo "monitor_output<<EOF" >> $GITHUB_OUTPUT
        echo "$OUTPUT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # Check if any issues were found
        if echo "$OUTPUT" | grep -q "ERROR\|CRITICAL\|FAILURE"; then
          echo "status=failed" >> $GITHUB_OUTPUT
        else
          echo "status=healthy" >> $GITHUB_OUTPUT
        fi
        
    - name: Create alert issue
      if: steps.health-check.outputs.status == 'failed'
      uses: actions/github-script@v7
      with:
        script: |
          const output = `${{ steps.health-check.outputs.monitor_output }}`;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `ðŸš¨ Contract Health Alert - ${{ matrix.network }}`,
            body: `## Contract Health Check Failed\n\n**Network:** ${{ matrix.network }}\n**Time:** ${new Date().toISOString()}\n\n### Details\n\`\`\`\n${output}\n\`\`\`\n\n**Action Required:** Please investigate the contract status immediately.`,
            labels: ['alert', 'monitoring', '${{ matrix.network }}', 'critical']
          });
          
    - name: Send Slack notification
      if: steps.health-check.outputs.status == 'failed' && secrets.SLACK_WEBHOOK_URL
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          ðŸš¨ Contract health check failed on ${{ matrix.network }}
          
          Details: Contract monitoring detected issues that require immediate attention.
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  gas-price-monitor:
    name: Gas Price Monitoring
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        network: [ethereum, polygon, bsc]
      fail-fast: false
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: contracts/package-lock.json
        
    - name: Install dependencies
      run: |
        cd contracts
        npm ci
        
    - name: Monitor gas prices
      run: |
        cd contracts
        
        # Create gas monitoring script
        cat > gas-monitor.js << 'EOF'
        const { ethers } = require("hardhat");
        
        async function main() {
          const provider = ethers.provider;
          const gasPrice = await provider.getGasPrice();
          const gasPriceGwei = ethers.formatUnits(gasPrice, "gwei");
          
          console.log(`Current gas price on ${{ matrix.network }}: ${gasPriceGwei} Gwei`);
          
          // Define thresholds for different networks
          const thresholds = {
            ethereum: 50,
            polygon: 100,
            bsc: 10
          };
          
          const threshold = thresholds["${{ matrix.network }}"] || 50;
          
          if (parseFloat(gasPriceGwei) > threshold) {
            console.log(`WARNING: Gas price (${gasPriceGwei} Gwei) exceeds threshold (${threshold} Gwei)`);
            process.exit(1);
          } else {
            console.log(`Gas price is within normal range (threshold: ${threshold} Gwei)`);
          }
        }
        
        main().catch((error) => {
          console.error(error);
          process.exit(1);
        });
        EOF
        
        npx hardhat run gas-monitor.js --network ${{ matrix.network }}

  performance-metrics:
    name: Performance Metrics
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event.schedule
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: contracts/package-lock.json
        
    - name: Install dependencies
      run: |
        cd contracts
        npm ci
        
    - name: Generate performance report
      run: |
        cd contracts
        
        # Create performance metrics script
        cat > performance-metrics.js << 'EOF'
        const { ethers } = require("hardhat");
        
        async function main() {
          console.log("# USDX Contract Performance Metrics");
          console.log(`Report generated: ${new Date().toISOString()}`);
          console.log("");
          
          // Test compilation time
          const startTime = Date.now();
          await hre.run("compile");
          const compileTime = Date.now() - startTime;
          console.log(`Compilation time: ${compileTime}ms`);
          
          // Test network latency
          const networks = ["ethereum", "polygon", "bsc"];
          for (const network of networks) {
            try {
              const netStartTime = Date.now();
              const provider = new ethers.JsonRpcProvider(process.env[`${network.toUpperCase()}_RPC_URL`]);
              await provider.getBlockNumber();
              const latency = Date.now() - netStartTime;
              console.log(`${network} network latency: ${latency}ms`);
            } catch (error) {
              console.log(`${network} network: unavailable`);
            }
          }
        }
        
        main().catch(console.error);
        EOF
        
        npx hardhat run performance-metrics.js > performance-report.txt
        
    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-metrics-${{ github.run_number }}
        path: contracts/performance-report.txt
        retention-days: 30

  security-scan:
    name: Periodic Security Scan
    runs-on: ubuntu-latest
    if: github.event.schedule # Only run on scheduled events
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: contracts/package-lock.json
        
    - name: Install dependencies
      run: |
        cd contracts
        npm ci
        
    - name: Run security analysis
      run: |
        cd contracts
        
        # Run multiple security tools
        echo "# Security Scan Report" > security-report.txt
        echo "Generated: $(date)" >> security-report.txt
        echo "" >> security-report.txt
        
        # Run Slither
        echo "## Slither Analysis" >> security-report.txt
        npx slither src/ --json slither-report.json || true
        
        # Run custom security checks
        echo "## Custom Security Checks" >> security-report.txt
        npx hardhat run scripts/security-check.js >> security-report.txt || true
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-${{ github.run_number }}
        path: |
          contracts/security-report.txt
          contracts/slither-report.json
        retention-days: 90
        
    - name: Check for vulnerabilities
      run: |
        cd contracts
        
        # Check if any high-severity issues were found
        if grep -q "HIGH\|CRITICAL" security-report.txt; then
          echo "::error::High or critical security issues found!"
          exit 1
        fi 